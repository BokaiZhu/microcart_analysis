import os
import pathlib
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from pyimzml.ImzMLParser import ImzMLParser
from maldi_tools import extraction, plotting


##################
# this script is an example of how signals were extracted from the raw .imzML and .ibd file
# raw files are directly generated by the MALDI-tof system -> scilslab
# this processing pipeline follows: https://github.com/angelolab/maldi-tools
# which is a tool mike angelo's lab developed.
# note the running takes large memory requirement (> 50G)
# this script generates .tiff images
##################


## input file location

data_name = "dsstt1c1-total_ion_count"
## make related directory

base_dir = pathlib.Path("/home/bkzhu/microMIBI/maldi_temp/")
imzml_dir = base_dir / "t1c1"
library_dir = base_dir / "libraries"
extraction_dir = base_dir / data_name / "extracted"
debug_dir = base_dir / data_name / "debug"
data_path = imzml_dir / "dsstt1c1-total ion count.imzML"

print('part1')

# Create directories
for directory in [base_dir, library_dir, extraction_dir, debug_dir]:
    if not os.path.exists(directory):
        directory.mkdir(parents=True, exist_ok=True)
        
## plotting parameters

plt.rcParams["figure.figsize"] = (20, 13)
plt.rcParams["ytick.color"] = "w"
plt.rcParams["xtick.color"] = "w"
plt.rcParams["axes.labelcolor"] = "w"
plt.rcParams["axes.edgecolor"] = "w"
plt.rcParams["axes.facecolor"] = "black"
plt.rcParams["savefig.edgecolor"] = "w"
plt.rcParams["savefig.facecolor"] = "black"
plt.rcParams["figure.facecolor"] = "black"
plt.rcParams["figure.constrained_layout.use"] = False

print('part2')

# read in imzl file, doable locally, takes ~ 5mins
imz_data = ImzMLParser(data_path, include_spectra_metadata="full")

library_peak_list = library_dir / "mice_N_glycan_list_XLU.csv"
library_peak_df = pd.read_csv(library_peak_list)

library_peak_df.head()

print('part3')

intensity_percentile = 99

total_mass_df, thresholds = extraction.extract_spectra(
    imz_data=imz_data, intensity_percentile=intensity_percentile
)

print('part4')


largest_intensity_count = 10
total_mass_df.nlargest(largest_intensity_count, ["intensity"])
global_intensity_threshold = np.percentile(total_mass_df["intensity"].values, intensity_percentile)
print(f"Global Intensity Threshold: {global_intensity_threshold}")


log_intensities, log_int_percentile = extraction.rolling_window(
    total_mass_df=total_mass_df, intensity_percentile=intensity_percentile, window_size=5000
)

print('part5')


plotting.plot_intensities(
    total_mass_df=total_mass_df,
    log_intensities=log_intensities,
    log_int_percentile=log_int_percentile,
    global_intensity_threshold=global_intensity_threshold,
)

print('part6')


peak_candidate_idxs, peak_candidates = extraction.signal_extraction(
    total_mass_df=total_mass_df, log_int_percentile=log_int_percentile
)


print(f"Candiate Peak Count: {len(peak_candidates)}")


plotting.plot_discovered_peaks(
    total_mass_df=total_mass_df,
    peak_candidate_idxs=peak_candidate_idxs,
    peak_candidates=peak_candidates,
    global_intensity_threshold=global_intensity_threshold,
)

print('part7')

peak_df, l_ips_r, r_ips_r, peak_widths_height = extraction.get_peak_widths(
    total_mass_df=total_mass_df,
    peak_candidate_idxs=peak_candidate_idxs,
    peak_candidates=peak_candidates,
    thresholds=thresholds,
)

print('part8')

peak_df, l_ips_r, r_ips_r, peak_widths_height = extraction.get_peak_widths(
    total_mass_df=total_mass_df,
    peak_candidate_idxs=peak_candidate_idxs,
    peak_candidates=peak_candidates,
    thresholds=thresholds,
)

print('part9')

save_peak_spectra_debug = True

panel_df = extraction.peak_spectra(
    total_mass_df=total_mass_df,
    peak_df=peak_df,
    peak_candidate_idxs=peak_candidate_idxs,
    peak_candidates=peak_candidates,
    peak_widths_height=peak_widths_height,
    l_ips_r=l_ips_r,
    r_ips_r=r_ips_r,
    save_peak_spectra_debug=save_peak_spectra_debug,
    debug_dir=debug_dir,
)

panel_df

print('part10')

image_data = extraction.coordinate_integration(peak_df=peak_df, imz_data=imz_data)

ppm = 100

matched_peaks_df = extraction.library_matching(
    image_xr=image_data, library_peak_df=library_peak_df, ppm=ppm, extraction_dir=extraction_dir
)

plotting.save_matched_peak_images(
    image_xr=image_data, matched_peaks_df=matched_peaks_df, extraction_dir=extraction_dir
)






